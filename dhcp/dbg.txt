$2 = {s = 7, myskt = {sin_family = 0, sin_port = 0, sin_addr = {
      s_addr = 4195931}, sin_zero = "\000\000\000\000`\341\377\377"}, skt = {
    sin_family = 2, sin_port = 7880, sin_addr = {s_addr = 0}, 
    sin_zero = "\000\000\000\000\240\213\245", <incomplete sequence \367>}, 
  buf = 0x401120, stat = 1, ttlcounter = 100, msgttlcounter = 4196160, 
  ipsetor = 0, cli_addr = {s_addr = 4294959424}, netmask = {s_addr = 32767}, 
  ttl = 0, msgttl = 0

client


server

$2 = {s = 8, myskt = {sin_family = 2, sin_port = 7880, sin_addr = {
      s_addr = 0}, sin_zero = "\000\000\000\000\000\000\000"}, buf = 0x603290, 
  bufskt = {sin_family = 2, sin_port = 31698, sin_addr = {s_addr = 16777343}, 
    sin_zero = "\000\000\000\000\000\000\000"}, c_entry_head = {
    fp = 0x7fffffffe020, bp = 0x7fffffffe020, stat = -140145760, 
    ttlcounter = 32767, id = {s_addr = 0}, cli_addr = {s_addr = 0}, netmask = {
      s_addr = 0}, ttl = 0}, ip_list_head = {fp = 0x603250, bp = 0x603270, 
    ip = 0, mask = 0}}

(gdb) p (dd->buf)
$4 = (struct dhcp_packet *) 0x603290
(gdb) p *(dd->buf)
$5 = {type = 1 '\001', code = 0 '\000', time = 0, address = 0, netmask = 0}



(gdb) print *(dd->c_entry_head->fp)
$4 = {fp = 0x7fffffffe020, bp = 0x7fffffffe020, stat = 1, ttlcounter = 10, 
  id = {s_addr = 16777343}, cli_addr = {s_addr = 83929280}, netmask = {
    s_addr = 16777215}, ttl = 10}
(gdb) print *(dd->ip_list_head->fp)
$5 = {fp = 0x7fffffffe048, bp = 0x7fffffffe048, ip = 117483712, 
  mask = 16777215}
(gdb) 

残りやること
ok IPのリスト受け取り正しく
ok ip, mask値の調整

ttlでタイムアウトを追加
select()使う
状態遷移を正しく
ポートを追加（additional）
タイマー追加
void settimer() {
     struct timeval value = {1,0,1,0};
     struct timeval ovalue = {0,0,0,0};
     settimer(REAL_TIME, value, ovalue);
}
signal();でシグナル受信の動作を追加
フラグセットだけ

select()
select()で記述子はソケットだけ
errnoに4番が入れられるのでそれのちぇっく
入ってたら
フラグを見て全部を0下げる
そこからイベント


残りやること
状態遷移図pdf
サーバ側ではクライアント番号表示
settimer使って時間ごとにSIGARLMを送る
そのたびにフラグを立てて、その際にselectがerrnoを返すので
そのなかでフラグを選択し、何が起きたかによって状態遷移

様々なもの表示

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
残りの処理
static flag_alrm;
static flag_sighup;(クライアント側で)
状態をdefineで定義、追随するパケット表示とかのコメントを全部変更
void signal_alrm_etc();とかで処理を行う
この中でflag_alrmとflag_sighupをチェック
sighupならreleaseして終わり
alarmなら、全てのクライアントttlを1下げる
そしてその中で0となったものがあるなら
それぞれSTATに応じてふさわしい処理を行う
	再送とstat変更　や　ステータスチェンジ




//以下いらない
loop_dhcpdでは
continue;はclient_checkも行ってからにする。
もしくは飛び先でクライアントチェック
//

＿＿＿＿＿＿＿＿＿＿＿＿＿
プリントをもっとちゃんと
configをちゃんと書く

＿＿＿＿＿＿＿＿＿＿＿＿＿
クライアント側
static flag_alrm;
static flag_sighup;(クライアント側で)
状態をdefineで定義、追随するパケット表示とかのコメントを全部変更
void signal_alrm_etc();とかで処理を行う
この中でflag_alrmとflag_sighupをチェック
sighupならreleaseして終わり
alarmなら、ttlを1下げる
そしてその中で0となったものがあるなら
それぞれSTATに応じてふさわしい処理を行う
	再送とstat変更


msg_ackとmsgack2()つくっておく
そうしないと状態変更メッセージがおかしくなる
そんなことはない

void signal_alrm_etc(struct dhcpd*dd) {
if (flag_sighup) {
	//sendrelease;
	exit();
	return;
}
if(flag_alrm != 0) {
	decrease_all_ttl_and_work(dd);
]
}
flag_alrm = 0;
return;
}
decrease_all_ttl_and_work(struct dhcpd*dd) {
	search_client_by_ttl();

	クライアント操作　全部1引く
	if(ttl < 0) {
		alarm_work(struct centry *client);
	}
}
alarm_work(struct centry *c){
statで場合分け　再送一つと状態遷移(クライアント破棄)2つのみ
	switch{

}

}
＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
クライアント側の処理
void signal_alrm_etc(struct dhcpc*dhc) {
if (flag_sighup) {
	//sendrelease;
	exit();
	return;
}
if(flag_alrm != 0) {
	(dhc->ttl)—;
	if (dhc->ttl <= 0) alarm_work(dhc);
]
}
flag_alrm = 0;
return;
}
void alarm_work(struct dhcpc * dhc) {
switch(dhc->stat){
	6個全てある。
	終了 exit;(リリースしない) 3つ
	メッセージ送って状態遷移３つ
}
return;
}

あとは各パケットにおいてcodeとかをチェック

